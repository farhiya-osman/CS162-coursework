Farhiya Osman #933931797

Description: This code allows you to sort a linked list in ascending and descending order while also counting the number of prime numbers in your linked list. A linked list is a data structure where values are not in consecutive order but one value points to another. The program prints out "passed" if the actual value is the same as the expected. The program tests include clearing the linked list, printing the number of prime numbers, sorting in ascending and descending order, inserting a value to a given index, push_backs and push_forward specific values. To push_back an integer means you insert a new value into the back of the linked list. To push_front an integer means you insert a new value to the back of the list.
 
Instructions: The user types "make" and then hits "enter" to compile the program. Once the program compiles, the user types "assign5" to run the program. The program runs the following tests. Option 1: print the linked list. This requires no parameters but it will print the current values stored in the linked list. Option 2: Push_front a value in the linked list. This requires you to input a new value that will be inserted in the front of the linked list. If you call the function push_front(7),7 will be inserted to the front of the linked list.  Option 3: Push_back a value in the linked list. This requires you to input a new value that will be inserted in the back of the linked list. If you call the function push_front(15),15 will be inserted to the back of the linked list. For both option 2 and 3 you must insert an integer value as the parameter. Option 4: To clear the linked list. This option requires no parameters. When this function is called it deletes the entire linked list and removes all the nodes and resets the length to 0. Option 5: sort ascending and Option 6 sort_descending. Both of these functionsâ€™ calls do not require parameters. They both use a Merge Sort algorithm that I got from GeeksforGeeks. The Merge sort algorithm uses recursion to sort the linked list. It begins by checking to make sure there is one element in the linked list. If there is one element, it returns that value. Then it divides the linked list into two halves. A front half and a back half. The two halves are sorted separately and then they are merged together and sorted. The final option the user has is to count the prime numbers. This function does not require any parameters but it takes the values in your linked list and counts how many are prime numbers with a counter variable.  

Limitations: N/A

Complexity analysis: 
	a. sort_ascending(): I used a recursive merge sort algorithm. This algorithm begins by checking to see if the linked list has one value stored in it. If so it returns that value. Then it calls a function to split the linked list in two halves, a front half and a back half. The two halves are sorted. Then you recursively call the merge function to merge both halves together. Finally, you merge the two halves and sort them in ascending order. I used this link to help me with this algorithm. https://www.geeksforgeeks.org/merge-sort-for-linked-list/
	Big O: O(nlogn) which is a n-log-n complexity that is used with linked lists that are split up into smaller list that are eventually merged together. 

	b. sort_descending():I used a recursive merge sort algorithm. This algorithm begins by checking to see if the linked list has one value stored in it. If so it returns that value. Then it calls a function to split the linked list in two halves, the front half and the back half. The two halves are sorted and then you recursively call the merge function to merge both halves. Finally, you merge the two halves and sort them in descending order. I used this link to help me with this algorithm. https://www.geeksforgeeks.org/merge-sort-for-linked-list/
	Big O: O(nlogn) which is a n-log-n complexity that is used with linked lists that are split up into smaller list that are eventually merged together. 


	c. count_prime(): Since this function does not accept any parameters I created a separate bool function that I passed in values from the linked list. The bool function returned true if it was prime and false otherwise. In my count_prime function I created a bool variable called testval that I set equal to my bool function to test if prime. Then I created a while loop that ran through all the values within the linked list. Within this while loop I used the testval variable. If the testval = 1 I increased my counter variable. Outside the while loop I printed the counter. This counter variable was equal to the number of prime numbers in the linked list. 
	Big O: For the complexity analysis this function is O(n*m) where n is the length of the linked list and m is the size of the number.



